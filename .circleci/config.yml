version: 2.1

orbs: 
  slack: circleci/slack@4.9.3 

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm cache clean --force
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm cache clean --force
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: test-frontend
          command: |
             cd frontend
             npm cache clean --force
             npm install
             npm audit fix
             npm run test  
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: test-backend
          command: |
             cd backend
             npm cache clean --force
             npm install jshint gulp-jshint --save-dev
             npm install
             npm run test  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: scan-frontend
          command: |
                cd frontend
                npm install
                npm audit fix --audit-level=critical --force
                #npm install oauth-sign@^0.9.0
                npm audit --audit-level=critical  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: scan-backend
          command: |
                cd backend
                npm install
                npm audit fix
                #npm install oauth-sign@^0.9.0
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical
###############################################################
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists and install tar gzip
          command: |
                 yum -y install tar gzip
                 aws cloudformation deploy \
                          --template-file .circleci/files/backend.yml \
                          --tags project=udapeople \
                          --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                          --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:            
          name: Ensure front-end infrastructure exist     
          command: |  
                yum -y install tar gzip
                aws cloudformation deploy \
                          --template-file .circleci/files/frontend.yml \
                          --tags project=udapeople \
                          --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                          --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run: 
          name: Add back-end ip to ansible inventory
          command: |  
                aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
                 root: ~/project
                 paths:
                    - .circleci/ansible/inventory.txt
                    - backend/
     # - destroy-environment

  configure_infrastructure:
    docker:  
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c1:1b:1e:dd:44:17:94:4a:ed:09:b7:e9:4a:e5:76:12"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl 
            pip install awscli
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
##############################################################################################
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          no_output_timeout: 7m
          command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
##############################################################################################
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
            cd frontend
            npm install
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://mrss3amrbueckrrrrret --recursive
      #- destroy-environment
      #- revert-migrations
      #################################################################
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8a:3b:84:ca:03:5b:26:06:08:0b:f0:aa:cb:2a:fd:dc"]
      - attach_workspace:
          at: ~/   
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip3 install awscli
            npm install
       # attach workspace 
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            cd backend
            npm i
            npm run build
            cd ..            
            tar -C backend -czf backend_artifact.tar.gz .
            cp backend .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=FALSE
            ansible-playbook -i inventory.txt deploy-backend.yml
    #  - destroy-environment
   #   - revert-migrations

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure_infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure_infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]