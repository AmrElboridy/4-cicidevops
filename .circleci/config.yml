version: 2.1

orbs: 
  slack: circleci/slack@4.9.3 

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: "string"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #SUCCESS = 1
            SUCCESS=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                --request GET \
                https://api.memstash.io/values/migrations-<< parameters.workflow_id >>)
            echo $SUCCESS
            if(( $SUCCESS==1 ));
            then
              cd backend
              npm i
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm cache clean --force
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm cache clean --force
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: test-frontend
          command: |
             cd frontend
             npm cache clean --force
             npm install
             npm audit fix
             npm run test  
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: test-backend
          command: |
             cd backend
             npm cache clean --force
             npm install jshint gulp-jshint --save-dev
             npm install
             npm run test  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: scan-frontend
          command: |
                cd frontend
                npm install
                npm audit fix --audit-level=critical --force
                #npm install oauth-sign@^0.9.0
                npm audit --audit-level=critical  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: scan-backend
          command: |
                cd backend
                npm install
                npm audit fix
                #npm install oauth-sign@^0.9.0
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical
###############################################################
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists and install tar gzip
          command: |
                 yum -y install tar gzip
                 aws cloudformation deploy \
                          --template-file .circleci/files/backend.yml \
                          --tags project=udapeople \
                          --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                          --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:            
          name: Ensure front-end infrastructure exist     
          command: |  
                yum -y install tar gzip
                aws cloudformation deploy \
                          --template-file .circleci/files/frontend.yml \
                          --tags project=udapeople \
                          --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                          --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run: 
          name: Add back-end ip to ansible inventory
          command: |  
                aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
                 root: ~/project
                 paths:
                    - .circleci/ansible/inventory.txt
                    - backend/

      - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}

  configure_infrastructure:
    docker:  
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c1:1b:1e:dd:44:17:94:4a:ed:09:b7:e9:4a:e5:76:12"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl 
            pip install awscli
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
##############################################################################################
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
                 cd backend
                 npm install
                 npm fund
                 npm audit fix
                 npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
                 if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                 then
                 curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" \
                     --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                 then
                 curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                 fi
##############################################################################################

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure_infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure_infrastructure]
    #  - deploy-frontend:
       #   requires: [run-migrations]
   #   - deploy-backend:
     #     requires: [run-migrations]