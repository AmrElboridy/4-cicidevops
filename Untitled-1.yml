
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
  ## Docker image here that supports AWS CLI
    steps:
      ## Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
                apk add --update tar gzip ansible nodejs npm curl
                pip install awscli
      - run:
          name: Get backend url
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}      
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c1:1b:1e:dd:44:17:94:4a:ed:09:b7:e9:4a:e5:76:12"]
      ## attach workspace
      - attach_workspace:
          at: ~/project
      - run:
      #    name: Install dependencies
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm 
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "To echo the Contents  of the inventory.txt file"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            npm install
            pm2 stop default
            pm2 start npm -- start
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:4}   
          ---------------------------------\
          ### npm install
      #   npm audit fix --force
              #   npm run migrations > migrations_dump.txt
                         # cat migrations-${CIRCLE_WORKFLOW_ID}.txt

        cd backend
                npm install
                npm audit fix  --force
                npm run migrations > migrations_dump.txt

    ## cd backend && npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
-----------------------------------------------------------
     environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRNOMENT: "production"
          TYPEORM_CONNECTION:
          TYPEORM_HOST
          TYPEORM_USERNAME
          TYPEORM_PASSWORD
          TYPEORM_DATABASE
          TYPEORM_PORT
          TYPEORM_ENTITIES
-----------------------------it was working----
     - run:
          name: Install dependencies  
          command: |
            sudo apt update
            sudo apt install tar gzip unzip
            sudo apt install nodejs npm
            sudo apt install ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: create backend .env
          command: |
            touch backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            cat backend/.env  # check vals
      - run:
          name: Deploy backend with Ansible
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is as below"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

#######################################